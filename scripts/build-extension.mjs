import { typecheck } from "./typecheck-tsconfig.mjs";
import esbuild from "esbuild";
import process from "process";
import path from "path";
import fs from "fs";
import os from 'os';

export async function buildExtension(out = "out") {
    const manifestData = fs.readFileSync('./manifest.json', 'utf8');
    const manifestJSON = JSON.parse(manifestData);
    const extensionId = manifestJSON.id;
    const outdir = path.join(expandTilde(out), extensionId + ".bike-extension");

    console.log(`Building extension ${extensionId} to ${outdir}`);

    const prod = (process.argv[2] === "production");
    const context = await esbuild.context({
        banner: { js: "// GENERATED BY ESBUILD" },
        logOverride: { "empty-glob": "silent" },
        entryPoints: [
            // app context entry points (0-1, ts)
            "src/app/main.ts",
            // style context entry points (0-1, ts)
            "src/style/main.ts",
            // dom context entry points (Top level, 0-n, ts/tsx)
            "src/dom/*.ts",
            "src/dom/*.tsx",
        ],
        external: [
            "@app",
            "@dom",
            "@style",
            "react",
            "react-dom",
            "react/jsx-runtime",
        ],
        format: 'cjs',
        logLevel: "info",
        sourcemap: prod ? false : "inline",
        treeShaking: true,
        outdir: outdir,
        bundle: true,
        minify: prod,
    });
    
    function copyManifest() {
        // Copy manifest.json to outdir, can't figure how to do this in
        // esbuild combined with watch so just use fs directly
        try {
            fs.cpSync('./manifest.json', path.join(outdir, '/manifest.json'));
        } catch (e) {
            console.error('Failed to copy file:', e);
        }
    }

    copyManifest();
    
    if (prod) {
        let appPath = "src/app/tsconfig.json";
        let domPath = "src/dom/tsconfig.json";
        let stylePath = "src/style/tsconfig.json";
        
        for (const path in [appPath, domPath, stylePath]) {
            if (fs.existsSync(appPath)) {
                typecheck(appPath);
            }
        }
        
        await context.rebuild();
        process.exit(0);
    } else {
        fs.watch('manifest.json', (eventType, filename) => {
            if (eventType === 'change') {
                copyManifest();
            }
        });
        await context.watch();
    }
}

function expandTilde(inputPath) {
    if (!inputPath.startsWith('~')) return inputPath;
    return path.join(os.homedir(), inputPath.slice(1));
}